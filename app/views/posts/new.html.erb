<%= render 'layouts/nav' %>
<div class="container">
<div class="col-md-6">
  <h1>新增行程</h1>
  <%= form_for setup_post(@post), url: posts_path,:html => {:multipart => true}  do |f| %>
    <div class="field">
      <%= f.label :title, '相簿名稱' %><br/>
      <%= f.text_field :title, autofocus: true, :class =>"form-control" %>
    </div>
    <p></p>
    <%= f.label :trip_date %>
    <div class="input-daterange input-group" id="datepicker">
      <%= f.text_field :start_date, class: :"form-control", placeholder: :"出發日期" %>
      <span class="input-group-addon">to</span>
      <%= f.text_field :return_date, class: :"form-control", placeholder: :"回程日期" %>
    </div>
    <p></p>
    <div class="form-group">
      <%= f.label :status %>
      <div class="clearfix"></div>
      <div class="col-md-4 col-xs-8">
        <%= f.select :status, post_status_options[0..1],{:default=>"Published"}, {:class => "form-control"} %>
      </div>
    </div>
    <div class="clearfix"></div>
    <p></p>
    <div class="field">
      <%= f.label :origin, '旅行出發地' %><br/>
      <div class="col-md-12">
        <%= f.text_field :origin, autocomplete: "on", :class =>"form-control", :id=>"origin-input", :placeholder=>"旅行出發地" %>
      </div>
    </div>

    <div class="field">
      <div class="clearfix"></div>
      <p></p>
      <%= f.label :location, '旅遊地點' %><br/>
      <!-- <div class="col-sm-9"> -->
      <%= f.nested_fields_for :locations do |ff| %>
        <div class="col-sm-10 col-xs-10 col-md-12">
          <%= ff.text_field :name, :class => "form-control", :placeholder=>"旅遊地點",:id=>"location_name" %>
        </div>
        <div class="clearfix"></div>
        <p></p>
        <div class="col-sm-10 col-xs-10 col-md-6">
          <%= ff.text_field :lat, :class => "form-control", :placeholder=>"lat", :id=>"latitude",:style=>"display:none;" %>
        </div>
        <div class="col-sm-10 col-xs-10 col-md-6">
          <%= ff.text_field :lng, :class => "form-control", :placeholder=>"lng",:id=>"longitude",:style=>"display:none;" %>
        </div>
        <div class="col-sm-1 col-xs-2 col-md-6">
          <%= ff.remove_nested_fields_link 'X', :class => 'btn-sm btn-danger', role: 'button',:style=>"display:none;" %>
        </div>
      <% end %>
      <div class="col-sm-12 col-md-6">
        <% f.add_nested_fields_link :locations, '＋ 新增旅遊地點', :class => "btn btn-primary" %>
      </div>
      <!-- </div> -->
    </div>
    <div class="clearfix"></div>
    <!-- <p></p> -->
    <% if false %>
      <div class="field">
        <%= f.label :destination, '目的地' %><br/>
        <div class="col-md-12">
          <%= f.text_field :destination, autocomplete: "off", :class =>"form-control", :id=>"destination-input", :placeholder=>"旅行目的地" %>
        </div>
      </div>
    <% end %>
    <!-- <div class="clearfix"></div> -->
    <div class="form-group">
      <%= f.label :countries, "國家", :class => "" %> <br>
      <!-- <div class="col-sm-9"> -->
        <%= f.nested_fields_for :countries do |ff| %>
        <div class="col-sm-10 col-xs-10 col-md-10">
          <%= ff.text_field :name, :class => "form-control", :placeholder=>"旅行國家", :id=>"country" %>
        </div>
        <div class="col-sm-1 col-xs-2">
          <%= ff.remove_nested_fields_link 'x', :class => 'btn btn-danger', role: 'button', style: :"display:none" %>
        </div>
        <div class="clearfix"></div>
        <% end %>
        <div class="col-sm-12">
          <%= f.add_nested_fields_link :countries, '＋ 新增旅行國家', :class => "btn btn-primary", style: :"display:none" %>
        </div>
      <!-- </div> -->
    </div>
    <div class="field">
      <%= f.label :distance, 'Distance  (Km)' %><br >
      <div class="col-xs-12 col-sm-4 col-md-6">
        <%= f.text_field :distance, :id=>"google_compute_distance", :class =>"form-control", :placeholder=>"路程距離 (公里)" %>
      </div>
    </div>
    <!-- distance:<span id="google_compute_distance1"></span> <br> -->
    <div class="clearfix"></div>
    <p></p>
    <div class="field">
      <%= f.label :description, '' %><br >
      <%= f.text_area :description, :class =>"form-control", :rows =>"8" %>
    </div>
    <br>
    <div class="form-group">
        <%= f.label :photos, "Upload File" %>
        <%= file_field_tag "pics[]", type: :file ,:multiple=> true %>
    </div>
    <%= f.submit '新增旅行主題', class:"btn btn-primary" %>
  <% end %>
</div>

  <!-- google map -->
  <div class="col-md-6">
    <div id="post_new_map" style="height:800px;"></div>
  </div>

</div>
<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDh7eo2VWtvG5qnxk2VvAJsNis4WgHHveA&language=en&libraries=places&callback=postNewMap"
    async defer>
</script>

<script>
  //datepicker
  $('.input-daterange').datepicker({
    format: "yyyy/mm/dd"
  });

  // Create an array of styles.
  <%= render 'layouts/mapStyles' %>

function postNewMap() {
  // Create a new StyledMapType object, passing it the array of styles,
  // as well as the name to be displayed on the map type control.
  var style1type = new google.maps.StyledMapType(style1,
      {name: "Orange"});
  var style2type = new google.maps.StyledMapType(style2,
      {name: "DarkBlue"});
  var style3type = new google.maps.StyledMapType(style3,
      {name: "Pink"});
  var style4type = new google.maps.StyledMapType(style4,
      {name: "LightBlue"});
  var style5type = new google.maps.StyledMapType(style5,
      {name: "LightGreen"});
  var mapOptions = {
    zoom: 7 ,
    // center: new google.maps.LatLng(25.03, 121.30),
    center: {lat: 25.03, lng: 121.30},
    scrollwheel: false,
    mapTypeControlOptions: {
      mapTypeIds: [google.maps.MapTypeId.ROADMAP,'style1id','style2id','style3id','style4id','style5id']
    },
  }; //mapOptions
  var map = new google.maps.Map(document.getElementById('post_new_map'),mapOptions);
  // Associate the styled map with the MapTypeId and set it to display.
  map.mapTypes.set('style1id', style1type);
  map.setMapTypeId('style1id');
  map.mapTypes.set('style2id', style2type);
  map.setMapTypeId('style2id');
  map.mapTypes.set('style4id', style4type);
  map.setMapTypeId('style4id');
  map.mapTypes.set('style5id', style5type);
  map.setMapTypeId('style5id');
  map.mapTypes.set('style3id', style3type);
  map.setMapTypeId('style3id');
  //========
  var origin_place_id = null;
  var destination_place_id = null;
  var travel_mode = google.maps.TravelMode.DRIVING;

  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer;
  directionsDisplay.setMap(map);
  //remove default pin form google and style polyline
  directionsDisplay.setOptions({ 
    polylineOptions:{strokeColor:"#00ffff",strokeWeight:4}, //google route customized
    suppressMarkers: true 
  });

  var origin_input = document.getElementById('origin-input');
  var post_locations_attributes_0_location = document.getElementById('post_locations_attributes_0_location');
  // var destination_input = document.getElementById('destination-input');
  var destination_input = document.getElementById('location_name');
  // var modes = document.getElementById('mode-selector');

  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

  var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
  origin_autocomplete.bindTo('bounds', map);
  // var location_0_autocomplete = new google.maps.places.Autocomplete(post_locations_attributes_0_location);
  // location_0_autocomplete.bindTo('bounds', map);
  var destination_autocomplete =
      new google.maps.places.Autocomplete(destination_input);
  destination_autocomplete.bindTo('bounds', map);

  // (Place Autocomplete Address Form, get the country)
  var componentForm = {
    country: 'long_name',
    // locality: 'long_name'
  };
  destination_autocomplete.addListener('place_changed', fillInAddress);
  // "Place Autocomplete Address Form" [START region_fillform]
  function fillInAddress() {
    // Get the place details from the autocomplete object.
    var place = destination_autocomplete.getPlace();
    
    // get geometry information
    // console.log(place);
    // console.log(place.geometry.location.lat());
    // console.log(place.geometry.location.lng());
    // get geometry information    
    
    for (var component in componentForm) {
      document.getElementById(component).value = '';
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        console.log(val);
        document.getElementById(addressType).value = val;
      }
    }
    document.getElementById('latitude').value = place.geometry.location.lat();
    document.getElementById('longitude').value = place.geometry.location.lng();
  }// [END region_fillform] (Place Autocomplete Address Form)

  var markerArray=[];
  function showSteps(directionResult) {
    // For each step, place a marker, and add the text to the marker's
    // info window. Also attach the marker to an array so we
    // can keep track of it and remove it when calculating new routes.
    var myRoute = directionResult.routes[0].legs[0];
    
    // for (var i = 0; i < myRoute.steps.length; i++) {
      // var icon = "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + i + "|FF0000|000000";
      // var icon = image;
      // if (i == 0) {
      //   icon = image;
      // }
      // var marker = new google.maps.Marker({
      //   position: myRoute.steps[i].start_point, 
      //   map: map,
      //   icon: image
      // });
      // attachInstructionText(marker, myRoute.steps[i].instructions);
      // markerArray.push(marker);
    // }
    // var marker = new google.maps.Marker({
    //   position: myRoute.steps[i - 1].end_point, 
    //   map:map,
    //   icon: image
    // });
    // markerArray.push(marker);

    var marker = new google.maps.Marker({
      position: myRoute.steps[0].start_point, 
      map: map,
      icon: image
    });
    var marker = new google.maps.Marker({
      position: myRoute.steps[myRoute.steps.length-1].end_point, 
      map:map,
      icon: image
    });

    markerArray.push(marker);
    // google.maps.event.trigger(markerArray[0], "click");
  }
  // =====

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  // function setupClickListener(id, mode) {
  //   var radioButton = document.getElementById(id);
  //   radioButton.addEventListener('click', function() {
  //     travel_mode = mode;
  //   });
  // }
  // setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
  // setupClickListener('changemode-transit', google.maps.TravelMode.TRANSIT);
  // setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

  function expandViewportToFitPlace(map, place) {
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
    }
  }

  origin_autocomplete.addListener('place_changed', function() {
    var place = origin_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    origin_place_id = place.place_id;
    route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);
  });

  destination_autocomplete.addListener('place_changed', function() {
    var place = destination_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    destination_place_id = place.place_id;
    route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);
  });

  var image = {
    url:'http://s3-us-west-1.amazonaws.com/northcali1/imageables/images/000/000/030/medium/icon1-shadow.png?1474910681',
    // This marker is 20 pixels wide by 32 pixels high.
    // size: new google.maps.Size(20, 32),
    // The origin for this image is (0, 0).
    // origin: new google.maps.Point(0, 0),
    // The anchor for this image is the base of the flagpole at (0, 32).
    anchor: new google.maps.Point(20, 54)
  }
  
  function route(origin_place_id, destination_place_id, travel_mode,
                 directionsService, directionsDisplay) {
    if (!origin_place_id || !destination_place_id) {
      return;
    }
    deleteMarkers();
    directionsService.route(
    {
      origin: {'placeId': origin_place_id},
      destination: {'placeId': destination_place_id},
      travelMode: travel_mode,
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
        showSteps(response);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }
  
  // show distance
  directionsDisplay.addListener('directions_changed', function() {
    computeTotalDistance(directionsDisplay.getDirections());
  });
  // Deletes all markers in the array by removing references to them.
  function deleteMarkers() {
    // First, remove any existing markers from the map.
    for (i = 0; i < markerArray.length; i++) {
      markerArray[i].setMap(null);
    }
    markerArray.length = 0;
  }
  // compute distance
  function computeTotalDistance(result) {
    var total = 0;
    var myroute = result.routes[0];
    for (var i = 0; i < myroute.legs.length; i++) {
      total += myroute.legs[i].distance.value;
    }
    total = total / 1000;
    // document.getElementById('google_compute_distance1').innerHTML = total + ' km';
    document.getElementById('google_compute_distance').value = total; //+ ' km';
  }
}
</script>