<%= render 'layouts/nav' %>
<div class="container">
<div class="col-md-6">
  <h1>新增行程</h1>
  <%= form_for @post, url: posts_path,:html => {:multipart => true}  do |f| %>
    <div class="field">
      <%= f.label :title, '相簿名稱' %><br/>
      <%= f.text_field :title, autofocus: true, :class =>"form-control" %>
    </div>
    <p></p>
    <%= f.label :trip_date %>
    <div class="input-daterange input-group" id="datepicker">
      <%= f.text_field :start_date, class: :"form-control", placeholder: :"出發日期" %>
      <span class="input-group-addon">to</span>
      <%= f.text_field :return_date, class: :"form-control", placeholder: :"回程日期" %>
    </div>
    <p></p>
    <div class="field">
      <%= f.label :origin, '出發地' %><br/>
      <div class="col-md-6">
      <%= f.text_field :origin, autocomplete: "on", :class =>"form-control", :id=>"origin-input", :placeholder=>"旅行出發地" %>
      </div>
    </div>

<!--  -->
<% if false %>
    <div class="form-group">
      <%= f.label :countries, "國家", :class => "col-sm-3" %>
      <div class="col-sm-9">
        <%= f.nested_fields_for :countries do |ff| %>
        <div class="col-sm-10 col-xs-10">
          <%= ff.text_field :country, :class => "form-control input-sm"  %>
        </div>
        <div class="col-sm-1 col-xs-2">
          <%= ff.remove_nested_fields_link 'x', :class => 'btn-sm btn-danger', role: 'button' %>
        </div>
        <% end %>
        <p></p>
        <div class="clearfix"></div>
        <div class="col-sm-12">
          <%= f.add_nested_fields_link :countries, '新增旅行國家', :class => "btn btn-primary" %>
        </div>
      </div>
    </div>
<% end %>
<!--  -->
    <div class="form-group">
      <div class="col-sm-12 col-md-6">
        <%= f.add_nested_fields_link :locations, '＋ 新增旅遊地點', :class => "btn btn-primary" %>
      </div>
      <div class="clearfix"></div>
      <p></p>
      <!-- <div class="col-sm-9"> -->
      <%= f.nested_fields_for :locations do |ff| %>
      <div class="col-sm-10 col-xs-10 col-md-6">
        <%= ff.text_field :location, :class => "form-control input-sm", :placeholder=>"旅遊地點"  %>
      </div>
      <div class="col-sm-1 col-xs-2 col-md-6">
        <%= ff.remove_nested_fields_link 'X', :class => 'btn-sm btn-danger', role: 'button' %>
      </div>
      <div class="clearfix"></div>
      <p></p>
      <% end %>
      <p></p>
      <!-- </div> -->
    </div>

    <div class="clearfix"></div>
    <div class="field">
      <%= f.label :locations, '目的地' %><br/>
      <%= f.text_field :destination, autocomplete: "off", :class =>"form-control", :id=>"destination-input", :placeholder=>"旅行目的地" %>
    </div>

    <div class="field">
      <%= f.label :distance, '' %><br >
      <%= f.text_field :distance, :class =>"form-control" %>
    </div>
    <div class="field">
      <%= f.label :description, '' %><br >
      <%= f.text_area :description, :class =>"form-control" %>
    </div>
    <br>
    <div class="form-group">
        <%= f.label :photos, "Upload File" %>
        <%= file_field_tag "pics[]", type: :file ,:multiple=> true %>
    </div>
    <%= f.submit '新增旅行主題', class:"btn btn-primary"  %>
  <% end %>
</div>


<!-- google map -->
<div id="post_new_map" style="height:800px;"></div>
</div>
<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDh7eo2VWtvG5qnxk2VvAJsNis4WgHHveA&libraries=places&callback=postNewMap"
    async defer>
</script>

<script>
//datepicker
  $('.input-daterange').datepicker({
    format: "yyyy/mm/dd"
  });

//style map css
  var my_best = [
    {
      "featureType":"all",
      "elementType":"all",
      "stylers":[
        {"invert_lightness":true},
        {"saturation":10},
        {"lightness":30},
        {"gamma":0.5},
        {"hue":"#435158"}]
      }];
  // Create an array of styles.
  var styles = [
    {
      stylers: [
        { hue: "#00ffe6" },
        { saturation: -20 }
      ]
    },{
      featureType: "road",
      elementType: "geometry",
      stylers: [
        { lightness: 100 },
        { visibility: "simplified" }
      ]
    },{
      featureType: "road",
      elementType: "labels",
      stylers: [
        { visibility: "off" }
      ]
    }
  ];

function postNewMap() {
  var styledMap = new google.maps.StyledMapType(styles,
    {name: "Styled Map"});
  var styledMap1 = new google.maps.StyledMapType(my_best,
    {name: "My Best"});
  var mapOptions = {
    zoom: 7 ,
    // center: new google.maps.LatLng(25.03, 121.30),
    center: {lat: 25.03, lng: 121.30},
    scrollwheel: false,
    mapTypeControlOptions: {
      mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style','map_style1']
    }
  }; //mapOptions
  var map = new google.maps.Map(document.getElementById('post_new_map'),mapOptions);
  map.mapTypes.set('map_style', styledMap);
  map.setMapTypeId('map_style');
  map.mapTypes.set('map_style1', styledMap1);
  map.setMapTypeId('map_style1');
  //========
  var origin_place_id = null;
  var destination_place_id = null;
  var travel_mode = google.maps.TravelMode.WALKING;

  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer;
  directionsDisplay.setMap(map);

  var origin_input = document.getElementById('origin-input');
  var post_locations_attributes_0_location = document.getElementById('post_locations_attributes_0_location');
  var destination_input = document.getElementById('destination-input');
  // var modes = document.getElementById('mode-selector');

  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

  var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
  origin_autocomplete.bindTo('bounds', map);
  var location_0_autocomplete = new google.maps.places.Autocomplete(post_locations_attributes_0_location);
  location_0_autocomplete.bindTo('bounds', map);
  var destination_autocomplete =
      new google.maps.places.Autocomplete(destination_input);
  destination_autocomplete.bindTo('bounds', map);

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  // function setupClickListener(id, mode) {
  //   var radioButton = document.getElementById(id);
  //   radioButton.addEventListener('click', function() {
  //     travel_mode = mode;
  //   });
  // }
  // setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
  // setupClickListener('changemode-transit', google.maps.TravelMode.TRANSIT);
  // setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

  function expandViewportToFitPlace(map, place) {
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);
    }
  }

  origin_autocomplete.addListener('place_changed', function() {
    var place = origin_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    origin_place_id = place.place_id;
    route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);
  });

  destination_autocomplete.addListener('place_changed', function() {
    var place = destination_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    destination_place_id = place.place_id;
    route(origin_place_id, destination_place_id, travel_mode,
          directionsService, directionsDisplay);
  });

  function route(origin_place_id, destination_place_id, travel_mode,
                 directionsService, directionsDisplay) {
    if (!origin_place_id || !destination_place_id) {
      return;
    }
    directionsService.route({
      origin: {'placeId': origin_place_id},
      destination: {'placeId': destination_place_id},
      travelMode: travel_mode
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }
}
</script>